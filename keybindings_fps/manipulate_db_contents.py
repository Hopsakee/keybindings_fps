"""Functions to add, delete and update data to the existing structure of the database. Changes to the structure of the Database are handled in the 'create_db' module."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_manipulate_db_contents.ipynb.

# %% auto 0
__all__ = ['add_binding', 'upsert_game', 'delete_game', 'add_new_action', 'copy_default_bindings', 'compare_with_default']

# %% ../nbs/01_manipulate_db_contents.ipynb 3
from pathlib import Path
from httpx import get as httpx_get
from fasthtml.common import *

from .create_db_structure import *

# %% ../nbs/01_manipulate_db_contents.ipynb 4
def add_binding(db, game_name: str, action_name: str, key_name: str, modifier_name: str = 'tap', description: str = None, sort_order: int = 0):
    """Add a key binding for a specific game and action"""
    game = next(db.t.games.rows_where("name = ?", [game_name]), None)
    if not game:
        raise ValueError(f"Game '{game_name}' not found")
        
    action = next(db.t.actions.rows_where("name = ?", [action_name]), None)
    if not action:
        raise ValueError(f"Action '{action_name}' not found")
        
    key = next(db.t.game_keys.rows_where("name = ?", [key_name]), None)
    if not key:
        raise ValueError(f"Key '{key_name}' not found")
        
    modifier = next(db.t.modifiers.rows_where("name = ?", [modifier_name]), None)
    if not modifier:
        raise ValueError(f"Modifier '{modifier_name}' not found")
        
    return db.t.bindings.insert(dict(
        game_id=game['id'],
        action_id=action['id'],
        key_id=key['id'],
        modifier_id=modifier['id'],
        description=description,
        sort_order=sort_order
    ))

# %% ../nbs/01_manipulate_db_contents.ipynb 5
def upsert_game(db: database, # Database connection
                name: str, # Name of the game to add to database
                game_type: str = None, # Type of game to add. Currently only 'dumb' and 'tactical' are possible.
                image_url: str = None # URL of the image to add to database, the image will be downloaded and addes as jpg file.
                ):
    """Update existing game or insert new one if it doesn't exist"""
    # Try to find existing game with this name
    existing = db.t.games.rows_where("name = ?", [name])
    game = next(existing, None)  # Get first match or None
    
    if image_url:
        response = httpx_get(image_url)
        if response.is_success:
            image = response.content
    else:
        image = None
    
    game_data = {"name":name, "game_type":game_type, "image":image}

    if game:
        # Update existing game
        game_data['id'] = game['id']
        return db.t.games.update(game_data)
    else:
        # Add new game
        return db.t.games.insert(game_data)


# %% ../nbs/01_manipulate_db_contents.ipynb 6
def delete_game(db: database, # Database connection, 
                name: str # Name of the game to delete
                ):
    return db.t.games.delete_where("name = ?", [name])

# %% ../nbs/01_manipulate_db_contents.ipynb 20
def add_new_action(db: database, # Database connection
                   action: str, # Short description of the action
                   category: str, # Category the action belongs to
                   default_keybinding: str, # Default keybinding for the action
                   default_modifier: str # Default modifier for the action
                   ):
    categories = {c['name']: c['id'] for c in db.t.categories()}

    if category not in categories.keys():
        db.t.categories.insert(dict(name=category, description='wat denk je zelf?'))
        categories = {c['name']: c['id'] for c in db.t.categories()}

    db.t.actions.insert(dict(
            name=action,
            category_id=categories[category]
            ))

    add_binding(db, 'default', action, default_keybinding, default_modifier)

# %% ../nbs/01_manipulate_db_contents.ipynb 22
def copy_default_bindings(db, new_game_name: str):
    """Copy all bindings from default game to a new game"""
    # Get the new game
    new_game = next(db.t.games.rows_where("name = ?", [new_game_name]), None)
    if not new_game:
        raise ValueError(f"Game '{new_game_name}' not found")
    
    # Get default game
    default_game = next(db.t.games.rows_where("name = ?", ["default"]), None)
    if not default_game:
        raise ValueError("Default game template not found")
    
    db.t.bindings.delete_where("game_id = ?", [new_game['id']])
    
    # Get all default bindings
    default_bindings = db.t.bindings.rows_where("game_id = ?", [default_game['id']])
    
    # Copy each binding to new game
    for binding in default_bindings:
        db.t.bindings.insert({
            'game_id': new_game['id'],
            'action_id': binding['action_id'],
            'key_id': binding['key_id'],
            'modifier_id': binding['modifier_id'],
            'description': binding['description'],
            'sort_order': binding['sort_order']
        }),

# %% ../nbs/01_manipulate_db_contents.ipynb 26
def compare_with_default(db, game_name: str):
    """Compare a game's bindings with default bindings and return differences"""
    # Get both games
    game = next(db.t.games.rows_where("name = ?", [game_name]), None)
    default = next(db.t.games.rows_where("name = ?", ["default"]), None)
    
    if not game:
        raise ValueError(f"Game '{game_name}' not found")
    if not default:
        raise ValueError("Default game template not found")
    
    # Get bindings for both games
    game_bindings = db.t.bindings.rows_where("game_id = ?", [game['id']])
    default_bindings = db.t.bindings.rows_where("game_id = ?", [default['id']])
    
    # Create dictionaries with action_id as key for easy comparison
    game_dict = {b['action_id']: (b['key_id'], b['modifier_id']) for b in game_bindings}
    default_dict = {b['action_id']: (b['key_id'], b['modifier_id']) for b in default_bindings}
    
    # Find differences
    differences = {}
    for action_id, (key_id, mod_id) in game_dict.items():
        if action_id in default_dict and (key_id, mod_id) != default_dict[action_id]:
            differences[action_id] = {
                'game': (key_id, mod_id),
                'default': default_dict[action_id]
            }
    
    return differences
